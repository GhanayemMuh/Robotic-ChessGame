import time
import math
from xarm.wrapper import XArmAPI


class RoboticArm:
    def __init__(self, ip_address, pickup_height=78, movement_speed=110,
                drop_speed=50,speed_adjust_distance=20,height=125,board_height=3.5,joint_speed=70):
        self.arm = XArmAPI(ip_address)
        self.arm.connect()
        self.arm.set_mode(0)
        self.arm.set_tcp_maxacc(1000)
        self.pickup_height = pickup_height
        self.movement_speed = movement_speed
        self.drop_speed = drop_speed
        self.height = height
        self.speed_adjust_distance = speed_adjust_distance
        self.board_height = board_height
        self.joint_speed = joint_speed

    def move_to_height(self,square="0"):
        current_position = self.arm.get_position()
        if square == "X":
            return
        angles = Position.get_coordinates(square+"H")
        self.arm.set_servo_angle(angle=angles,speed=self.joint_speed,mvacc=400,wait=True)
        
    def check_pickup_success(self):
        # Get the state of the vacuum gripper
        code, state = self.arm.get_vacuum_gripper()

        # Check if the code is 0 (indicating success) and state is 1 (suction cup is on)
        if code == 0 and state == 1:
            return True  # Pickup was successful
        else:
            return False  # Pickup failed

    def move_and_pick(self, angles,square):
        self.move_to_height()
        self.arm.set_servo_angle(angle=angles,speed=self.joint_speed,mvacc=400,wait=True)
        
        self.pick()
    
        self.move_to_height(square)
        pickup_success = self.check_pickup_success()
        
        if not pickup_success:
            self.retry_pickup()

    def move_and_release(self,angles,square,capture):
    
        self.move_to_height(square)

        if capture is True:
            pose = [angles[0],angles[1],125,180,0,0]
            _, top_angles = self.arm.get_inverse_kinematics(pose,False,False)
            self.arm.set_servo_angle(angle=top_angles,speed=self.joint_speed,mvacc=400,wait=True)
            pose = [angles[0],angles[1],self.pickup_height-self.board_height,180,0,0]
            _, drop_angles = self.arm.get_inverse_kinematics(pose,False,False)
            self.arm.set_servo_angle(angle=drop_angles,speed=self.joint_speed,mvacc=400,wait=True)
        else:
            self.arm.set_servo_angle(angle=angles,speed=self.joint_speed,mvacc=400,wait=True)
            
        self.release()
        self.move_to_height(square)
        
    def retry_pickup(self):
        initial_radius = 5
        max_radius = 18
        min_radius = 2
        radius_change_step = 2
        current_radius = initial_radius
        _, position_list = self.arm.get_position()  # Assuming the second element is the position list [x, y, z, ...]
        x = position_list[0]
        y = position_list[1]

        while current_radius <= max_radius:
            retry_offsets = self.calculate_retry_offsets(current_radius)

            for dx, dy in retry_offsets:
                self.arm.set_position(x + dx, y + dy, self.pickup_height + self.speed_adjust_distance, speed=self.movement_speed, mvacc=400, wait=True, timeout=30)
                self.arm.set_position(x + dx, y + dy, self.pickup_height, speed=self.drop_speed, mvacc=400, wait=True, timeout=30)
                
                self.pick()
                
                self.arm.set_position(x + dx, y + dy, self.pickup_height + self.speed_adjust_distance, speed=self.movement_speed, mvacc=400, wait=True, timeout=30)
                
                if self.check_pickup_success():
                    return  # Successful pickup

            # Increase radius for next attempt or decrease if max reached
            if current_radius == max_radius:
                radius_change_step = -1  # Start decreasing the radius
            current_radius += radius_change_step

            # Break if minimum radius is reached and unsuccessful
            if current_radius < min_radius:
                print("Failed to pick up the piece after exhaustive retries.")
                break

    def calculate_retry_offsets(self, radius):
        offset_factor = radius * math.sqrt(2) / 2
        return [
            (radius, 0), (offset_factor, offset_factor), (0, radius), (-offset_factor, offset_factor),
            (-radius, 0), (-offset_factor, -offset_factor), (0, -radius), (offset_factor, -offset_factor)
        ]
        
    def handle_error_code_24(self,x,y,z):
        # Check if the current error is Error Code 24
        success = False
        if self.arm.error_code == 24:
            while not success:
            
                print("Error Code 24 detected. Attempting to resolve...")

                # Clear the error
                self.arm.clean_error()
                self.arm.motion_enable(True)
                self.arm.set_state(state=0)
                time.sleep(0.5)

                # Adjust the arm's position
                success = self.adjust_position_after_error()

                if success:
                    print("Error resolved. Continuing operation.")
                    #self.arm.set_position(x, y, z, wait=True, speed = self.drop_speed,mvacc=400,timeout=30)
                
            

    def adjust_position_after_error(self):
        # Define retry offsets (5mm radius, moving anti-clockwise)
        retry_offsets = [(5, 0), (0, 5), (-5, 0), (0, -5)]
        for dx, dy in retry_offsets:
            # Get the current position
            _, position_list = self.arm.get_position()  # Assuming the second element is the position list [x, y, z, ...]

            # Create a new position by adding offsets to x and y
            new_x = position_list[0] + dx
            new_y = position_list[1] + dy
            new_position = [new_x, new_y, position_list[2]]  # Assuming z is at index 2
            self.arm.set_position(*new_position, wait=True, speed = self.drop_speed,mvacc=400,timeout=30)

            # Check if the error occurs again
            if self.arm.error_code != 24:
                return True  # Error resolved
            else:
                return False
        
    def move_to_initial_position(self):
        angles = Position.get_coordinates("0")
        self.arm.set_servo_angle(angle=angles,speed=self.joint_speed,mvacc=400,wait=True)

    def pick(self):
        print("Picking up chess piece...")
        self.arm.set_vacuum_gripper(True)
        time.sleep(1)

    def release(self):
        print("Releasing the chess piece...")
        self.arm.set_vacuum_gripper(False)
        time.sleep(1)

    def disconnect(self):
        self.arm.disconnect()
    

class Position:
    # Class attributes
    capture_position = [None, None]  # Initialize as None, will set in class method
    capture_offset = 35  # 3 cm in mm
    x_count = 0  # Counter for how many times "X" is received
    
    @classmethod
    def initialize_capture_position(cls):
        cls.capture_position = [125.7, -181.4]
        cls.x_count = 0  # Reset the count whenever initializing

    @classmethod
    def update_capture_position(cls):
        if cls.x_count % 2 == 0:
            cls.capture_position[1] -= cls.capture_offset  # Move in negative Y direction
        else:
            cls.capture_position[0] += cls.capture_offset  # Move in positive X direction
            cls.capture_position[1] += cls.capture_offset  # Move in negative Y direction
        cls.x_count += 1
        
    @staticmethod
    def get_coordinates(position):
        # Assume a mapping for simplicity. In actual, it should read from file or database.
        if position != "X":
            mapping = {
                'H1': [-46.27005785293003, 46.70679380883899, 34.34823244914499, -1.0051450897554155e-14, -12.358559652146704, -46.27005785293003, 0.0],
                'H2': [-38.75358835058732, 48.56142581002381, 41.89265108557139, -3.363669952027976e-05, -6.668773016905132, -38.75355419964147, 0.0],
                'H3': [-33.08273841481961, 51.40197854242705, 50.753192533545885, -0.00037065055501819366, -0.6487808328784408, -33.08236616950985, 0.0],
                'H4': [-28.730903875713498, 55.22149887347364, 60.896689394458896, 4.441638322798863e-05, 5.67519393607984, -28.730948271943102, 0.0],
                'H5': [-25.322222838337762, 60.072572429583495, 72.48459709500577, 2.106481874422036e-05, 12.412028080516857, -25.322245036452564, 0.0],
                'H6': [-22.597952369006695, 66.1641859238861, 85.98251255543335, 1.3639701172374746e-05, 19.818324923999967, -22.597966029385034, 0.0],
                'H7': [-20.380094322855175, 74.09633732402119, 102.56593182246833, 9.849981417435384e-06, 28.469596205994442, -20.380102860591638, 0.0],
                'H8': [-18.5445834362518, 86.14825392583288, 126.46906674752006, 7.339077104824915e-06, 40.320816236781766, -18.544590266440967, 0.0],
                'G1': [-36.61378912136529, 45.77370459085062, 27.979461831154325, -1.3156295943448217e-05, -17.794241052148998, -36.61377887608154, 0.0],
                'G2': [-29.707176964729268, 47.07425798618567, 36.086191158927654, -2.2825410971478873e-05, -10.98806511971072, -29.707153059067174, 0.0],
                'G3': [-24.847155860806694, 49.60739073423581, 45.37151914685817, -6.153713992368656e-05, -4.235867318509406, -24.847094389104164, 0.0],
                'G4': [-21.28856241643294, 53.23517057980721, 55.7836883289628, 0.00010496162488560576, 2.5485218045804126, -21.288668284365073, 0.0],
                'G5': [-18.58955169419987, 57.91777068984953, 67.46061730005704, 2.8637210348480462e-05, 9.542843195112921, -18.589580722503843, 0.0],
                'G6': [-16.48087763702559, 63.778735526069966, 80.7981872395294, 1.641004348301882e-05, 17.019455128554018, -16.48089300495122, 0.0],
                'G7': [-14.79219191191539, 71.2587352333394, 96.73111978057989, 1.1260685353295961e-05, 25.4723828396932, -14.792202157199144, 0.0],
                'G8': [-13.411612605169882, 81.84675105072058, 118.07957271075007, 8.243312159430736e-06, 36.232818244934904, -13.411619435359052, 0.0],
                'F1': [-23.784620897668248, 45.65502663892706, 23.404177653351244, -1.2104545032494371e-05, -22.250848985575818, -23.784610652384494, 0.0],
                'F2': [-18.6970520415467, 46.28424415583615, 32.02625499928579, -1.9264476198997295e-05, -14.257988302776706, -18.69703325852648, 0.0],
                'F3': [-15.358424839393201, 48.50272374920214, 41.686529636798745, -4.069673053290429e-05, -6.8161941124033945, -15.358385565805474, 0.0],
                'F4': [-13.126640891297672, 51.74215611403954, 51.7156071687357, -0.010528118786949781, -0.02654729778750656, -13.116113008465744, 0.0],
                'F5': [-11.28215684367219, 56.53142670344454, 64.13066102305487, 3.71449150468054e-05, 7.599236027157629, -11.28219355593898, 0.0],
                'F6': [-9.953098507609736, 62.25459247315996, 77.42209986487296, 1.8856191091648192e-05, 15.167507391713006, -9.953116436856307, 0.0],
                'F7': [-8.901907634909032, 69.48781061552765, 93.03830970392079, 1.2385265165123583e-05, 23.55050079594043, -8.901918733966433, 0.0],
                'F8': [-8.050221465222524, 79.40029340323791, 113.24207074052103, 8.90569885383557e-06, 33.841780752377716, -8.050228295411694, 0.0],
                'E1': [-7.881077806842682, 45.85562587975575, 21.02541230318527, -1.1815392002627164e-05, -24.830211869023188, -7.881066707785281, 0.0],
                'E2': [-6.067303570386048, 45.98381487009855, 29.95991445458725, -1.8044227745017244e-05, -16.02390212305859, -6.067286494913122, 0.0],
                'E3': [-4.930514632572629, 47.99462597684489, 39.839113730472036, -3.5178399562361714e-05, -8.155513100146502, -4.930479627853132, 0.0],
                'E4': [-4.151861968133773, 51.3607412753131, 50.63549129867364, -0.00039468628419215944, -0.7252507770522573, -4.151467097822382, 0.0],
                'E5': [-3.5853268047851885, 55.86457142911409, 62.49606698107659, 4.328899516448834e-05, 6.631497259509787, -3.5853694934675007, 0.0],
                'E6': [-3.1547010934190443, 61.5231475149433, 75.78166601115433, 2.0306203222928166e-05, 14.258521057531967, -3.1547209436563195, 0.0],
                'E7': [-2.8163520915134184, 68.64743097023846, 91.27056112407311, 1.3005774793703896e-05, 22.623135276476532, -2.816364044344466, 0.0],
                'E8': [-2.5435073785125653, 78.28350283242746, 111.01652873155325, 9.254276247815994e-06, 32.733029314220374, -2.5435150624753815, 0.0],
                'D1': [9.307027498923645, 45.84187329386193, 21.132246707088026, -1.1824843491585225e-05, -24.709628294321195, 9.307038597981046, 0.0],
                'D2': [7.1723953078087295, 45.99552864452512, 30.05199223478819, -1.809226032915008e-05, -15.943534702189638, 7.172412383281655, 0.0],
                'D3': [5.831504522782874, 48.01643477086474, 39.9210042835259, -3.53852640601771e-05, -8.095433048659777, 5.83153952750237, 0.0],
                'D4': [4.9119723765233365, 51.387126296076865, 50.71083170031346, -0.0004228093556881597, -0.6762969970017776, 4.91239499447823, 0.0],
                'D5': [4.242473392097279, 55.89372267649171, 62.568023023982676, 4.297891011548486e-05, 6.674296078622734, 4.242430703414966, 0.0],
                'D6': [3.7333604828746365, 61.55510597006978, 75.85364254462792, 2.0238248254937137e-05, 14.298536574558133, 3.7333408460807727, 0.0],
                'D7': [3.333222814972725, 68.68403395400055, 91.34779007301844, 1.2977402413945746e-05, 22.66374928882872, 3.333210862141678, 0.0],
                'D8': [3.0104833566415174, 78.33164200569772, 111.11269779506704, 9.238574790797793e-06, 32.78105237427473, 3.010475672678701, 0.0],
                'C1': [24.994430107237804, 45.64396856266081, 23.71026745836349, -1.2153828261616834e-05, -21.933702811844615, 24.994440352521558, 0.0],
                'C2': [19.695938179357093, 46.3287155175221, 32.2944970185597, -1.9446922179079023e-05, -14.034218498962394, 19.69595696237731, 0.0],
                'C3': [16.200191013083913, 48.57147643338749, 41.92780265413486, -4.15756278131402e-05, -6.643675059913098, 16.200231994218935, 0.0],
                'C4': [13.73777035973727, 52.0468747585759, 52.565419305268684, 0.0005376343551288535, 0.518541665206727, 13.737233336113778, 0.0],
                'C5': [11.915688478815785, 56.6199220494258, 64.34588028380197, 3.645644149379208e-05, 7.725956526828876, 11.915652620322643, 0.0],
                'C6': [10.515519335757034, 62.35172459334671, 77.6389037295075, 1.8678923563476635e-05, 15.287180843708091, 10.515501406510463, 0.0],
                'C7': [9.407147826872277, 69.5998393782942, 93.27319307928836, 1.2307161734143818e-05, 23.673353700994156, 9.407136727814876, 0.0],
                'C8': [8.508589484006556, 79.55111081030095, 113.54177261111202, 8.861027378112354e-06, 33.99066180081107, 8.50858180004374, 0.0],
                'B1': [37.542148433353425, 45.816287405231066, 28.452080185867942, -1.330775426271276e-05, -17.36420892691041, 37.54215867863718, 0.0],
                'B2': [30.545015779647223, 47.17019482326767, 36.51131579324759, -2.3323055314714377e-05, -10.658879883793725, 30.54503968530932, 0.0],
                'B3': [25.591115433130117, 49.73063125252494, 45.761307797507044, -6.526175611607349e-05, -3.969325589452006, 25.591180319927233, 0.0],
                'B4': [21.949618860158036, 53.37391221241768, 56.15067780816217, 9.590044789849927e-05, 2.776765595744494, 21.949523237509656, 0.0],
                'B5': [19.1806072366688, 58.068711040317645, 67.81815038235052, 2.7937305118608836e-05, 9.74943507316465, 19.180578208364828, 0.0],
                'B6': [17.01341211868585, 63.94507795311645, 81.16345892615252, 1.6180784623357938e-05, 17.21837755794147, 17.013396750760215, 0.0],
                'B7': [15.275675390051205, 71.4538190964133, 97.13537135679626, 1.1149821700208373e-05, 25.681553967930256, 15.27566514476745, 0.0],
                'B8': [13.85368464636791, 82.12538861791126, 118.62738120294178, 8.175577845601293e-06, 36.50198575484136, 13.85367781617874, 0.0],
                'A1': [46.95825746841676, 46.83039632715412, 34.95489668141469, -1.6613235839621173e-05, -11.875503060834015, 46.9582711287951, 0.0],
                'A2': [39.42826760661201, 48.72318859523181, 42.453792107022956, -3.54294698009172e-05, -6.269399049529793, 39.42830175755786, 0.0],
                'A3': [33.7162828565679, 51.587360121784954, 51.27953032608165, -0.0007754856148603394, -0.30783307739575744, 33.717058083038694, 0.0],
                'A4': [29.315745653585008, 55.42359734082515, 61.40191165717557, 4.193371939117256e-05, 5.978315170124067, 29.31570467244999, 0.0],
                'A5': [25.859268659944817, 60.29141169059071, 72.98600811216558, 2.0511105445727275e-05, 12.694592152706639, 25.85924816937731, 0.0],
                'A6': [23.091175696898947, 66.40796903574218, 86.50622414023324, 1.3408704762969163e-05, 20.098256812038354, 23.091162036520608, 0.0],
                'A7': [20.83424555360037, 74.39172251505673, 103.16799933742662, 9.724816769166939e-06, 28.776273407275305, 20.834237015863906, 0.0],
                'A8': [18.964274655086985, 86.63498686646632, 127.40963843774418, 7.2533769825995685e-06, 40.77465840146702, 18.96426953244511, 0.0],
                'H1H': [-46.27005785293003, 30.177039338112785, 28.75055774505021, -9.763829933473446e-14, -1.4264820199494013, -46.27005785293003, 0.0],
                'H2H': [-38.75358835058732, 33.86225424441483, 36.78031254842479, 7.673107608580947e-05, 2.9180640669820748, -38.75366689776278, 0.0],
                'H3H': [-33.08273841481961, 38.27172874992668, 46.008307928462216, 3.117630954045342e-05, 7.73658344740377, -33.08276915067088, 0.0],
                'H4H': [-28.730903875713498, 43.37483287131542, 56.38351212677874, 1.9512724344106135e-05, 13.008681816784259, -28.730920951186423, 0.0],
                'H5H': [-25.322222838337762, 49.23484148105205, 68.04522685149676, 1.4042044901801124e-05, 18.810387077992015, -25.3222364987161, 0.0],
                'H6H': [-22.597952369006695, 56.057585744869485, 81.39573316925713, 1.0805661460569566e-05, 25.338152547029527, -22.59796261429045, 0.0],
                'H7H': [-20.380094322855175, 64.35369402021247, 97.3929446205866, 8.612060274978878e-06, 33.03925060037414, -20.380102860591638, 0.0],
                'H8H': [-18.5445834362518, 75.71980498784151, 118.97854854892881, 6.929685469779914e-06, 43.258753806371054, -18.544588558893675, 0.0],
                'G1H': [-36.61378912136529, 27.160276262859675, 21.78724306547203, -4.293648914936537e-05, -5.37302978229306, -36.61374814023027, 0.0],
                'G2H': [-29.707176964729268, 31.017801473995505, 30.618054407536754, -0.0006235826391917772, -0.3997458391591348, -29.706552002420214, 0.0],
                'G3H': [-24.847155860806694, 35.58585248146754, 40.42532837636672, 5.3876809086705366e-05, 4.839478883106937, -24.847210502320056, 0.0],
                'G4H': [-21.28856241643294, 40.797539535186566, 51.175400677090224, 2.590866123879507e-05, 10.377863703224598, -21.288588029642327, 0.0],
                'G5H': [-18.58955169419987, 46.692436751203616, 63.012183395519436, 1.6895603143353258e-05, 16.319746644315817, -18.589568769672795, 0.0],
                'G6H': [-16.48087763702559, 53.4404382549336, 76.29844495394666, 1.236498126669808e-05, 22.858006699013053, -16.480889589856634, 0.0],
                'G7H': [-14.79219191191539, 61.45331566086909, 91.82567108848755, 9.57828774988104e-06, 30.37235542761847, -14.792200449651853, 0.0],
                'G8H': [-13.411612605169882, 71.87156712642961, 111.70989538514709, 7.60564850178698e-06, 39.8383248436229, -13.411618581585406, 0.0],
                'F1H': [-23.784620897668248, 25.09158784063394, 16.627849647585922, -3.114166276597518e-05, -8.463734777953436, -23.784590161816983, 0.0],
                'F2H': [-18.6970520415467, 29.063906333602883, 26.235552319057284, -9.615379470176243e-05, -2.828354441432423, -18.69695641889832, 0.0],
                'F3H': [-15.358424839393201, 33.760518576727485, 36.56334134415558, 9.877659265828854e-05, 2.802823407758327, -15.358523877136166, 0.0],
                'F4H': [-13.013819826587401, 39.06795122223174, 47.64482808378644, 3.2723784044948416e-05, 8.57687856910199, -13.013852269985959, 0.0],
                'F5H': [-11.28215684367219, 45.00847751699907, 59.65707836199328, 1.9424094651130347e-05, 14.648600844994212, -11.282175626692409, 0.0],
                'F6H': [-9.953098507609736, 51.73336566057773, 72.95831169508118, 1.362749598461791e-05, 21.224949449598025, -9.95311131421443, 0.0],
                'F7H': [-8.901907634909032, 59.605728999813124, 88.2654349836184, 1.0318086600788952e-05, 28.659709398899867, -8.901916172645494, 0.0],
                'F8H': [-8.050221465222524, 69.56870054586811, 107.34106050519682, 8.096959012096505e-06, 37.7723599593287, -8.050227441638047, 0.0],
                'E1H': [-7.881077806842682, 24.070843389932218, 13.872009190137408, -2.8021655260760746e-05, -10.198833346021162, -7.881049632312355, 0.0],
                'E2H': [-6.067303570386048, 28.085222187810096, 23.975579326483462, -6.950221125647339e-05, -4.109643288213455, -6.067234414720701, 0.0],
                'E3H': [-4.930514632572629, 32.850945700051476, 34.613192562522705, 0.00016227874338416563, 1.7622467557495292, -4.930676849565416, 0.0],
                'E4H': [-4.151861968133773, 38.21278080229488, 45.88684667445188, 3.741126009005189e-05, 7.6740667259306425, -4.151898680400563, 0.0],
                'E5H': [-3.5853268047851885, 44.182492495385674, 58.00437748852529, 2.0925322974557116e-05, 13.821888408234209, -3.585346868465875, 0.0],
                'E6H': [-3.1547010934190443, 50.90341912924573, 71.32966674786998, 1.4330504214525648e-05, 20.42624761862424, -3.1547145403539725, 0.0],
                'E7H': [-2.8163520915134184, 58.71871965306025, 86.5521981435366, 1.071507763479749e-05, 27.833476782929058, -2.8163616964669385, 0.0],
                'E8H': [-2.5435073785125653, 68.49450303472187, 105.29820556595936, 8.352908883088729e-06, 36.8037025312375, -2.5435139952583237, 0.0],
                'D1H': [9.307027498923645, 24.11560161956331, 13.997093859502437, -2.813572450585625e-05, -10.11850861383452, 9.307054819680324, 0.0],
                'D2H': [7.1723953078087295, 28.128559738093827, 24.076768579037203, -7.033525155375632e-05, -4.05179201283027, 7.172465317247722, 0.0],
                'D3H': [5.831504522782874, 32.89117551426285, 34.69985400271183, 0.0001578801858729938, 1.8086772077885123, 5.831346574658317, 0.0],
                'D4H': [4.9119723765233365, 38.250510767270036, 45.96459471777413, 3.717923613248426e-05, 7.714083950504101, 4.911935664256547, 0.0],
                'D5H': [4.242473392097279, 44.218839347053894, 58.07721462583431, 2.08549399965667e-05, 13.858371009912185, 4.242453328416591, 0.0],
                'D6H': [3.7333604828746365, 50.93984111299482, 71.40120614923669, 1.429826753716283e-05, 20.46136503624186, 3.7333468224962965, 0.0],
                'D7H': [3.333222814972725, 58.75750146716758, 86.62715263948832, 1.0697096356183616e-05, 27.869654587415322, 3.3332134234626163, 0.0],
                'D8H': [3.0104833566415174, 68.54108492486135, 105.38686142138613, 8.341422653356529e-06, 36.84577308143019, 3.010476739895759, 0.0],
                'C1H': [24.994430107237804, 25.226178425776336, 16.978354465223465, -3.164657811165688e-05, -8.247825668100162, 24.99446084308907, 0.0],
                'C2H': [19.695938179357093, 29.191832361662637, 26.52735336832586, -0.00010144521502888767, -2.6644809143274806, 19.69604063219464, 0.0],
                'C3H': [16.200191013083913, 33.87960975509583, 36.81730485296958, 9.385490076999759e-05, 2.937696165090807, 16.200097097982827, 0.0],
                'C4H': [13.73777035973727, 39.180246362375925, 47.87503619466714, 3.218651151704812e-05, 8.694788978517566, 13.737738770112358, 0.0],
                'C5H': [11.915688478815785, 45.11726877009903, 59.874394490815575, 1.9240668347762478e-05, 14.757125720716544, 11.915670549569214, 0.0],
                'C6H': [10.515519335757034, 51.843034592986044, 73.17328506901815, 1.3539318999073264e-05, 21.33025047603211, 10.515506529152342, 0.0],
                'C7H': [9.407147826872277, 59.72346780072581, 88.49265488673723, 1.0267560054674847e-05, 28.76918367091683, 9.407139289135815, 0.0],
                'C8H': [8.508589484006556, 69.71270825432866, 107.61469154372587, 8.064017218483027e-06, 37.901979874302626, 8.508582653817385, 0.0],
                'B1H': [37.542148433353425, 27.37969096730446, 22.311627423905176, -4.4958866776679036e-05, -5.0680665316070455, 37.54219282958303, 0.0],
                'B2H': [30.545015779647223, 31.22432590392918, 31.073088440232173, -0.0016342740869692955, -0.15123930464643207, 30.54665160995344, 0.0],
                'B3H': [25.591115433130117, 35.77966592935582, 40.831850990482124, 5.129937306615717e-05, 5.052181219144889, 25.59106420671134, 0.0],
                'B4H': [21.949618860158036, 40.982238095627466, 51.550617119144874, 2.5330685753192027e-05, 10.568378169743763, 21.94959324694865, 0.0],
                'B5H': [19.1806072366688, 46.873320650993065, 63.37149915718629, 1.6658978831494356e-05, 16.498176798645936, 19.180590161195873, 0.0],
                'B6H': [17.01341211868585, 53.62502753234779, 76.65886720625906, 1.2241390509552648e-05, 23.03383625881669, 17.0134001658548, 0.0],
                'B7H': [15.275675390051205, 61.65507261876209, 92.21378292769519, 9.503908570322207e-06, 30.558710308933097, 15.275666852314743, 0.0],
                'B8H': [13.85368464636791, 72.12911989965245, 112.19759821264269, 7.55511462767489e-06, 40.06847831299023, 13.853678669952387, 0.0],
                'A1H': [46.95825746841676, 30.46984613273665, 29.403807282553984, -0.0001837562261216428, -1.06604429298966, 46.95843846842976, 0.0],
                'A2H': [39.42826760661201, 34.13944722659604, 37.37039991157887, 6.864735632340784e-05, 3.2309477757843656, 39.42819930472031, 0.0],
                'A3H': [33.7162828565679, 38.535411617929604, 46.55111672218147, 2.9878791418820023e-05, 8.015700835383633, 33.71625212071663, 0.0],
                'A4H': [29.315745653585008, 43.62989945568037, 56.89593340888061, 1.9032686737365213e-05, 13.266032245652939, 29.315728578112083, 0.0],
                'A5H': [25.859268659944817, 49.488617159663875, 68.54566798179444, 1.3804808294999384e-05, 19.057045699488683, 25.859254999566478, 0.0],
                'A6H': [23.091175696898947, 56.321575971385066, 81.90842082873664, 1.0668850995057224e-05, 25.586839734709688, 23.091165451615193, 0.0],
                'A7H': [20.83424555360037, 64.65135366424163, 97.96286243512164, 8.52424724666754e-06, 33.311505355785435, 20.8342387234112, 0.0],
                'A8H': [18.964274655086985, 76.13570886678194, 119.76175268067584, 6.865839880215088e-06, 43.6260438138939, 18.96426953244511, 0.0],
                '0H': [-6.4, -1.2, 10.3, 0, 11.4, -6.4],
                '0': [0, 0, 0, 0, 0, 0]
                
            }
            return mapping.get(position, None)
        else:
             # Handling capture move
            current_capture_pos = Position.capture_position.copy()
            Position.update_capture_position()
            return current_capture_pos


class ActionExecutor:
    def __init__(self, arm):
    
        self.arm = arm
        Position.initialize_capture_position()
        
    def execute_actions(self, actions_string):
            try:
                actions = actions_string.strip().split('\n')
                for action in actions:

                    from_position, to_position = action.strip().split('->')
                    from_joints = Position.get_coordinates(from_position.strip())
                    to_joints = Position.get_coordinates(to_position.strip())

                    if from_joints is not None and to_joints is not None:
                        self.arm.move_and_pick(from_joints,from_position.strip())
                        self.arm.move_and_release(to_joints,to_position.strip(),True if to_position.strip() == "X" else False)
                self.arm.move_to_initial_position()
            except Exception as e:
                print(f"An error occurred: {e}")


